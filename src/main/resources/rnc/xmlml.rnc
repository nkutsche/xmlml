datatypes xs = "http://www.w3.org/2001/XMLSchema-datatypes"

default namespace = "http://www.nkutsche.com/xmlml"  

start = document | document-fragment

document = 
## root element of an XmlML document
## XDM equivalent: document-node()
element document {document_meta, prolog, elem, epilog}

document-fragment = 
## root element of an XmlML document
## XDM equivalent: document-node()
element document {document_meta, attribute fragment {"true"}, fragment-content}

fragment-content = (xmlDecl?, el_content)

prolog = (xmlDecl?, (pi | comment | doctypeDecl | ws)*)

epilog = (pi | comment | ws)*

elem = (empty_elem | non_empty_elem)

non_empty_elem = 
## non-empty element in a XmlML document
## XDM equivalent: element()
element element {non_collapsed?, element_default_ns?, qname, (namespace_decl | attr)*, ws?, el_content, closeTagSpace?}

empty_elem = 
## empty element in a XmlML document
## XDM equivalent: element()
element element {collapsed?, element_default_ns?, base_uri?, qname, (namespace_decl | attr)*, ws?, closeTagSpace?}

el_content = (el_content_mixed | el_content_struct)

el_content_mixed = 
## contains the content of an element node
## specifies with @space='preserve' that whitespace as text content has to be preserved
element content {attribute space {"preserve"}, childNode*}

el_content_struct = 
## contains the content of an element node
## specifies with @space='skip' that text can occur only as non-relevant whitespace
element content {attribute space {"skip"}, childNode_struct*}


childNode_base = (ws | pi | comment | elem)

childNode_struct = (childNode_base | name_entity_complex_struct)

childNode = (childNode_base | textNode | name_entity_complex)

closeTagSpace = 
## Specifies the non-relevant whitespace which follows a closing tag of an element
## Example: </elname    > 
element close-tag-space {ws}

attr = 
## Attribute of an XmlML element
## XDM equivalent: attribute()
element attribute {defaultAttr?, attr_data_type?, attrContent}

namespace_decl = 
## Namespace declaration of an XmlML element
## XDM equivalent: namespace-node()
## Difference: the <attribute namespace="true"> specifies only the namespace declaration. The namespace-node() in XDM is inherited to all child elements. 
element attribute {attribute namespace {"true"}, defaultAttr?, nsContent}

attrContent = ws, qname, ws?, equal, ws?, quotedValue

nsContent = ws, (nsname), ws?, equal, ws?, quotedValue

nsname = 
## Specifies the prefix for a namespace declaration 
element name {xs:NCName?}

textNode = 
## Text node in an XmlML tree
## XDM equivalent: text()
element text {base_uri?, (entity | cdata | node_content)*}

cdata = 
## CDATA section as part of a XmlML text node
element cdata-section {node_content}

entity = (name_entity | char_entity)

name_entity = 
## Named entity with unstructured value as part of a XmlML text node or quoted value
element entity {attribute name {xs:NCName}, (entity | cdata | node_content)*}

name_entity_complex = 
## Named entity with structured value as content of an XmlML element 
element entity {base_uri?, attribute name {xs:NCName}, attribute complex {"true"}, childNode*}

name_entity_complex_struct = 
## Named entity with structured value as content of an XmlML element
element entity {attribute name {xs:NCName}, attribute complex {"true"}, childNode_struct*}

char_entity = 
## Character reference entity
## @codepoint references a Unicode codepoint with a hex (beginning with 'x') or decimal value
element entity {attribute codepoint {ent_charref_name}}

pi = 
## Processing instruction in an XmlML tree
## XDM equivalent: processing-instruction()
element pi {base_uri?, ncname, (ws, piValue?)?}

comment = 
## Comment node in an XmlML tree
## XDM equivalent: comment()
element comment {base_uri?, node_content}

xmlDecl = 
## Representation of the XML declaration in the XmlML tree
element xml-decl {xmlDecl_version, xmlDecl_encoding?, xmlDecl_standalone?, ws?}

xmlDecl_Content = ws, emptyName, ws?, equal, ws?, quotedValue

xmlDecl_version = 
## Represents the pseudo attribute version in the XML declaration
element version {xmlDecl_Content}

xmlDecl_encoding = 
## Represents the pseudo attribute encoding in the XML declaration
element encoding {xmlDecl_Content}

xmlDecl_standalone = 
## Represents the pseudo attribute standalone in the XML declaration
element standalone {xmlDecl_Content}

doctypeDecl = 
## Represents a doctype declaration in the XmlML tree
element doc-type-decl {ws, qname, (ws, dtd_external)?, (ws?, dtd_inline)?, ws?}

dtd_inline = 
## Represents an internal subset of a doctype declaration
element inline {(pi | node_content)}

dtd_external = dtd_system | dtd_public

dtd_system = 
## Represents the reference to an external DTD prefixed by the keyword SYSTEM
element system {ws, quotedValue}

dtd_public = 
## Represents the reference to an external DTD prefixed by the keyword PUBLIC
element public {ws, quotedValue, ws, quotedValue}

quotedValue = 
## Represents a quoted value. 
## Default quotation is the double quote ("). With @quotes='single' the single quotes (') are used. 
element value {quotes?, (entity | node_content)*}

piValue = 
## Represents a value of a processing instruction. 
element value {node_content}

ws = (ws_simple | ws_mixed)

ws_simple = 
## Represents non-relevant whitespace.
## With one of @space, @tab or @nl attribute a number of sequential whitespace characters are represented.
## the integer value of the regarding attribute gives the number of characters which are represented.
## @space represents a usual whitespace (&#x20;)
## @tab represents the tabulator sign ($#x9;)
## @nl represents a linefeed character. The used linefeed character depends on @line-feed-format
element ws {attribute space {xs:integer} | attribute tab {xs:integer} | attribute nl {xs:integer}}

ws_mixed = 
## Represents non-relevant whitespace.
## The content element specifies a combination of different whitespace characters 
element ws {(nl | space | tab | entity_ws)+}

entity_ws = (entity_ws_name | entity_ws_cp)

entity_ws_name = 
## Represents a named entity which must have only whitespace as value.
element entity {attribute name {xs:NCName}, ws}

entity_ws_cp = 
## Represents a character reference entity which must reference only to whitespace characters.
element entity {attribute codepoint {"x9" | "xA" | "xa" | "xD" | "xd" | "x20" | "9" | "10" | "13" | "32"}}

qname = 
## Represents the qualified name of an attribute or element node
element name {xs:QName}

ncname = 
## Represents the name of a processing-instruction node
element name {xs:NCName}

emptyName = 
## Represents the static name of a pseudo attribute inside of an XML declaration
element name {empty}


equal = 
## Represents the equal key character for attributes, namespace declarations 
## or pseudo attributes in the XML declaration.
element eq{empty}

nl = 
## Represents one or more linefeed characters as relevant or non-relevant whitespace
## With the optional amount attribute a number of sequential linefeed characters are represented.
## The used linefeed character(s) depends on the linefeed format. 
## The linefeed format is configured by the line-feed-format attribute which can be specified on the document element
## or by each <nl>.
element nl {amount?, lf_format?}

space = 
## Represents one or more space characters (x20) as non-relevant whitespace
## With the optional amount attribute a number of sequential space characters are represented.
element space {amount?}

tab = 
## Represents one or more tabulator characters (x9) as non-relevant whitespace
## With the optional amount attribute a number of sequential tabulator characters are represented.
element tab {amount?}

node_content = (nl | data)*

data = 
## Represents charater data which is used as-it as node value
element data {xs:string}

# attributes

document_meta = lf_format?, doc_uri?, base_uri?, doc_id

doc_id = attribute id {xs:NCName}

doc_uri = attribute document-uri {xs:anyURI}

base_uri = attribute xml:base {xs:anyURI}

collapsed = 
## Specifies for an empty element if the collapsed syntax (e.g. <element/>) was used.
attribute collapsed {xs:boolean}

non_collapsed = 
## Specifies for an empty element if the collapsed syntax (e.g. <element/>) was used.
attribute collapsed {"false"}

element_default_ns = 
## Specifies the namespace for unprefixed element names
attribute element-default-namespace {xs:string}

quotes = 
## Specifies for a quoted value, if the single quotation sign (') or the double quotation sign (") should be used.
attribute quotes {"double" | "single"}

lf_format = 
## Specifies for the document or for single linefeed (<nl/>) if linefeeds should be serialized in 
## unix style ("n", characer: x10) mac style ("r", character: x13) or windows style ("rn", character combination x13 x10)
attribute line-feed-format {"rn" | "r" | "n"}

amount = 
## With the given integer the amount attribute specifies that a sequence of multiple characters (space, 
## tabulator or line feeds) are represented. 
attribute amount {xs:integer}

defaultAttr = 
## Specifies with a boolean value if an attribute (or namesapce declaration) was derived as 
## default value by the DTD.
attribute default {xs:boolean}

attr_data_type = 
## Datatype of an attribute derived by the DTD 
attribute type {
           'CDATA'
           | 'ID'
           | 'IDREF'
           | 'IDREFS'
           | 'ENTITY'
           | 'ENTITIES'
           | 'NMTOKEN'
           | 'NMTOKENS'
           | 'ENUM'
           }

# Types

ent_charref_name = xs:string {pattern = "(x[0-9a-fA-F]+|[0-9]+)"}
